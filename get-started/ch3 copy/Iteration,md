## Iteration

ES6 defined the basic data structure/collection types in JS as iterables. 

This includes strings, arrays, maps, sets, and others.

 Protocol is a defined set of rules and regulations that determine how data is transmitted

__________

The iterator pattern has been around for decades, and suggests a "standardized" approach to consuming data from a source one *chunk* at a time. 

After many years of various JS community efforts around mutually agreed-upon iteration techniques, 

ES6 standardized a specific protocol for the iterator pattern directly in the language. 

The protocol defines a `next()` method whose return is an object called an *iterator result*; 

the object has `value` and `done` properties, 
where `done` is a boolean that is `false` until the iteration over the underlying data source is complete.

```js

function reverseArrayIterator(array) {
  var index = array.length - 1
  return {
    next: () =>
      index >= 0 
        ? { value: array[index--], done: false } 
        : { done: true },
  }
}

const it = reverseArrayIterator(["three", "two", "one"])

// // Test # 0

console.log(it) //-> { next: [Function: next] }
console.log(it.next()) //-> { value: 'one', done: false }

// Test # 1
console.log(it.next().value) //-> 'one'
console.log(it.next().value) //-> 'two'
console.log(it.next().value) //-> 'three'
console.log(`Are you done? ${it.next().done}`) //-> true
```

### Consuming Iterators

With the ES6 iteration protocol in place, 

it's workable to consume a data source one value at a time, 

checking after each `next()` call for `done` to be `true` to stop the iteration. 

But this approach is rather manual, 

so ES6 also included several mechanisms (syntax and APIs) for standardized consumption of these iterators.

One such mechanism is the `for..of` loop:

```js
// given an iterator of some data source:
var array = [0, 1, 2, 3]

// loop over its results one at a time
for (let value of array) {
  console.log(`Iterator value: ${value}`)
}
/*  
  Iterator value: 0
  Iterator value: 1
  Iterator value: 2
  Iterator value: 3
*/ 
var values = [...array]

console.log(values)     //  [ 0, 1, 2, 3 ]
console.log([...array]) //  [ 0, 1, 2, 3 ]
console.log(...array)   //  0 1 2 3
```

### The spread operator     __...__

Another mechanism that's often used for consuming iterators is the `...` operator. 

This operator actually has two symmetrical forms: 

__*spread*__ and __*rest* or *gather*__

The *spread* form is an iterator-consumer.

To *spread* an iterator, you have to have *something* to spread it into.
 
There are two possibilities in JS: 

an array 
or an argument list for a function call.

An array spread:

```js
// given an iterator of some data source:
var array = [0, 1, 2, 3]

var values = [...array]

console.log(values)     //  [ 0, 1, 2, 3 ]
console.log([...array]) //  [ 0, 1, 2, 3 ]
console.log(...array)   //  0 1 2 3
```

A function call spread:

```js

// Make an array
var TheArray = [0, 1, 2, 3]

// spred array into a function
// spread an iterator into a function,
// call with each iterated value
// occupying an argument position.
logArguments(...TheArray)
```

In both cases, the iterator-spread form of `...` follows 
the iterator-consumption protocol 
(the same as the `for..of` loop) 
to retrieve all available values from an iterator and 
place (aka, spread) them into the receiving context - array

### Iterables

The iterator-consumption protocol 
is technically defined for consuming *iterables*; 
an iterable is a value that can be iterated over.

The protocol automatically creates an iterator instance from an iterable, 
and consumes *just that iterator instance* to its completion. 

This means a single iterable could be consumed more than once; 

each time, a new iterator instance would be created and used.

So where do we find iterables?

ES6 defined the basic data structure/collection types in JS as iterables. 

This includes strings, arrays, maps, sets, and others.

Consider:

```js
// an array is an iterable
var arr = [ 10, 20, 30 ];

for (let val of arr) {
    console.log(`Array value: ${ val }`);
}
// Array value: 10
// Array value: 20
// Array value: 30
```

Since arrays are iterables, we can shallow-copy an array using iterator consumption via the `...` spread operator:

```js
var arrCopy = [ ...arr ];
```

We can also iterate the characters in a string one at a time:

```js
var greeting = "Hello world!";
var chars = [ ...greeting ];

chars;
// [ "H", "e", "l", "l", "o", " ",
//   "w", "o", "r", "l", "d", "!" ]
```

A `Map` data structure uses objects as keys, associating a value (of any type) with that object. Maps have a different default iteration than seen here, in that the iteration is not just over the map's values but instead its *entries*. An *entry* is a tuple (2-element array) including both a key and a value.

Consider:

```js

var btn1 = { name: "btn1" }

var btn2 = { name: "btn2" }

var buttonNames = new Map()
console.log(buttonNames) // Map(0) {}
buttonNames.set(btn1, "Button 1")
console.log(buttonNames) // Map(1) { { name: 'btn1' } => 'Button 1' }
buttonNames.set(btn2, "Button 2")
console.log(buttonNames)
/*
  Map(2) {
    { name: 'btn1' } => 'Button 1',
    { name: 'btn2' } => 'Button 2'
  }
*/

for (let [btn,btnName] of buttonNames) {
    console.log(`${btn} ${btn.name} ${btnName}`)
    // [object Object] btn1 Button 1
    // [object Object] btn2 Button 2
}

for (let btnName of buttonNames.values()) {
  console.log(btnName)
  // Button 1
  // Button 2
}

for (let btnName of buttonNames.keys()) {
  console.log(btnName)
  // { name: 'btn1' }
  // { name: 'btn2' }
}
```

In the `for..of` loop over the default map iteration, 
we use the `[btn,btnName]` syntax (called "array destructuring") to break down each consumed tuple into the respective key/value pairs (`btn1` / `"Button 1"` and `btn2` / `"Button 2"`).

Each of the built-in iterables in JS expose a default iteration, 
one which likely matches your intuition. 

But you can also choose a more specific iteration if necessary. 
For example, if we want to consume only the values of the above `buttonNames` map, we can call `values()` to get a values-only iterator:

```js
for (let btnName of buttonNames.values()) {
    console.log(btnName);
    // Button 1
    // Button 2
}
```

Or if we want the index *and* value in an array iteration, we can make an entries iterator with the `entries()` method:

```js
var arr = [ 10, 20, 30 ];

for (let [idx,val] of arr.entries()) {
    console.log(`[${ idx }]: ${ val }`);
    // [0]: 10
    // [1]: 20
    // [2]: 30
}
```

For the most part, 
all built-in iterables in JS have three iterator forms available: keys-only (`keys()`), 
values-only (`values()`), 
and entries (`entries()`).

Beyond just using built-in iterables, you can also ensure your own data structures adhere to the iteration protocol; 

doing so means you opt into the ability to consume your data with `for..of` loops and the `...` operator. 

"Standardizing" on this protocol means code that is overall more readily recognizable and readable.

| NOTE: |
| :- |
You may have noticed a nuanced shift that occurred in this discussion. We started by talking about consuming **iterators**, but then switched to talking about iterating over **iterables**. 
The iteration-consumption protocol expects an *iterable*, 
but the reason we can provide a direct *iterator* is that 
an iterator is just an iterable of itself! 
When creating an iterator instance from an existing iterator, the iterator itself is returned. |

